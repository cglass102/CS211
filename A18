// Rat class i.e. a class for rational numbers
#include <iostream>
using namespace std;

class Rat{
private:
   int n;
   int d;
public:
   // constructors
 
   // default constructor
   Rat(){
      n=0;
      d=1;
   }

   // 2 parameter constructor
   Rat(int i, int j){
      n=i;
      d=j;
   }
   // conversion constructor
   Rat(int i){
      n=i;
      d=1;
   }

   //accessor functions (usually called get() and set(...) )
   int getN(){ return n;}
   int getD(){ return d;}
   void setN(int i){ n=i;}
   void setD(int i){ d=i;}

   //arithmetic operators

   Rat operator+(Rat r){
      Rat t;
      t.n=n*r.d+d*r.n;
      t.d=d*r.d;
      return t;
   }
 
   Rat operator-(Rat r){
      Rat t;
      t.n=n*r.d-d*r.n;
      t.d=d*r.d;
      return t;
    }
   Rat operator*(Rat r){
      Rat t;
      t.n=n*r.n;
      t.d=d*r.d;
      return t;
   }

   Rat operator/(Rat r){
      Rat t;
      t.n=n*r.d;
      t.d=d*r.n;
      return t;
   } 
 
   // 2 overloaded i/o operators
   friend ostream& operator<<(ostream& os, Rat r);
   friend istream& operator>>(istream& is, Rat& r);
}; //end Rat

int gcd(int a, int b){
   if (b==0) return a;
   else return gcd(b, a%b);
}

// operator<<() is NOT a member function but since it was declared a 
//friend of Rat
// it has access to its private parts.
ostream& operator<<(ostream& os, Rat r){
   if(r.n>=r.d){
      if(r.n%r.d==0)
         os<<r.n/r.d;
      else{
         int x=gcd(r.n%r.d,r.d);
         os<<r.n/r.d<<" "<<(r.n%r.d)/x<<"/"<<(r.d)/x;
      }
   }
   else{
      int x=gcd(r.n%r.d,r.d);
      os<<r.n/x<<" / "<<r.d/x<<endl;
   }
   return os;
}
// operator>>() is NOT a member function but since it was declared a 
//friend of Rat
// it has access to its provate parts.
istream& operator>>(istream& is, Rat& r){
 is>>r.n>>r.d;
 return is;
}
int main(){
 Rat x(1,2), y(2,3), z;
 z=x+y;
 cout<<z<<endl;

 x.setN(3);
 y.setD(2);
 z=x+y;
 cout<<z<<endl;
 cin>>x;
 cout<<x<<endl;
 z= x+5;
 cout<<z<<endl;
 return 0;
}
